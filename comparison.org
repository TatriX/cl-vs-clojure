* Disclaimer
I take examples in *clojure* from the "Joy of Clojure" book and then I
write equivalent code in Common List.

* Structure
First goes Clojure.

Then goes vanilla CL and optionally Alexandria variant.

* Vectors
** Collect chars from range into a vector
#+BEGIN_SRC clojure
  (vec (map char (range 65 75)))
  ;; [\A \B \C \D \E \F \G \H \I \J]
#+END_SRC

#+BEGIN_SRC lisp
  (make-array 10 :initial-contents (loop for i from 65 below 75 collect (code-char i)))
  (map 'vector #'code-char (iota 10 :start 65))
  ;; (#\A #\B #\C #\D #\E #\F #\G #\H #\I #\J)
#+END_SRC
** Access element of a vector
#+BEGIN_SRC clojure
  (nth [1 2 3] 2)
  (get [1 2 3] 2)
  ([1 2 3] 2)
  ;; 3
#+END_SRC

#+BEGIN_SRC lisp
  (aref #(1 2 3) 2)
  ;; 3
#+END_SRC
** Vector to a list
#+BEGIN_SRC clojure
  (seq [1 2 3])
  ;; (1 2 3)

  (rseq [1 2 3])
  ;; (3 2 1)
#+END_SRC

#+BEGIN_SRC lisp
  (coerce #(1 2 3) 'list)
  ;; (1 2 3)
  (reverse (coerce #(1 2 3) 'list))
  ;; (3 2 1)
#+END_SRC
** Change vector's element
#+BEGIN_SRC clojure
  (assoc [1 2 3] 2 13)
  ;; [1 2 13]
#+END_SRC

#+BEGIN_SRC lisp
  (setf (aref #(1 2 3) 2) 13)
  ;; 13
#+END_SRC
** Replace elements in a vector
#+BEGIN_SRC clojure
  (replace {2 :a, 4 :b} [1 2 3 2 3 4])
  ;; [1 :a 3 :a 3 :b]
#+END_SRC

#+BEGIN_SRC lisp
  (substitute :b 4 (substitute :a 2 #(1 2 3 2 3 4)))
  ;; #(1 :a 3 :a 3 :b)
#+END_SRC
** Access matrix element
#+BEGIN_SRC clojure
  (get-in [[1 2 3]
           [4 5 6]
           [7 8 9]]
          [1 2])
  ;; 6
#+END_SRC

#+BEGIN_SRC lisp
  (aref #2a((1 2 3)
            (4 5 6)
            (7 8 9))
        1 2)
  ;; 6
#+END_SRC
** Change matrix's element
#+BEGIN_SRC clojure
  (let [matrix [[1 2 3]
                [4 5 6]
                [7 8 9]]]
    (assoc-in matrix [1 2] 'x))
  ;; [[1 2 3] [4 5 x] [7 8 9]]
#+END_SRC

#+BEGIN_SRC lisp
  (let ((matrix #2a((1 2 3)
                    (4 5 6)
                    (7 8 9))))
    (setf (aref matrix 1 2) 'x) ; setf returns 'x
    matrix)
  ;; #2A((1 2 3) (4 5 x) (7 8 9))
#+END_SRC
** Change matrix's element by applying function to it
#+BEGIN_SRC clojure
  (let [matrix [[1 2 3]
                [4 5 6]
                [7 8 9]]]
    (update-in matrix [1 2] * 100))
  ;; [[1 2 3] [4 5 600] [7 8 9]]
#+END_SRC

#+BEGIN_SRC lisp
  (let ((matrix #2a((1 2 3)
                    (4 5 6)
                    (7 8 9))))
    (setf (aref matrix 1 2) (* 100 (aref matrix 1 2)))
    matrix)
  ;; #2A((1 2 3) (4 5 600) (7 8 9))
#+END_SRC
** Select neighbor values from matrix
#+BEGIN_SRC clojure
  (defn neighbors
    ([size yx] (neighbors [[-1 0] [1 0] [0 -1] [0 1]] size yx))
    ([deltas size yx]
     (filter (fn [new-yx]
               (every? #(< -1 % size) new-yx))
             (map #(map + yx %) deltas))))

  (let [matrix [[1 2 3]
                [4 5 6]
                [7 8 9]]]
    (map #(get-in matrix %) (neighbors 3 [0 0])))
  ;; (4 2)
#+END_SRC

#+BEGIN_SRC lisp
  (defun neighbors (size yx &key (deltas '((-1 0) (1 0) (0 -1) (0 1))))
    (loop
       for delta in deltas
       for new-yx = (mapcar #'+ delta yx)
       when (every (lambda (n) (< -1 n size)) new-yx)
       collect new-yx))

  (let ((matrix #2a((1 2 3)
                    (4 5 6)
                    (7 8 9))))
    (loop for yx in (neighbors 3 '(0 0))
       collect (apply #'aref matrix yx)))
  ;; (4 2)
#+END_SRC
** Skeleton
#+BEGIN_SRC lisp

#+END_SRC

#+BEGIN_SRC clojure

#+END_SRC
